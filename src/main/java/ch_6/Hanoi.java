/**
 *
 *                                                  Ханойская башня.
 * Решение этой головоломки может быть представлено в рекурсивном виде. Допустим, нужно переместить все диски со стержня
 * S на стержень D, имея промежуточный стержень I. На стержне S находятся n дисков. Алгоритм перемещения выглядит так:
 *  1. Переместить поддерево дисков, состоящих из n-1 элементов с S на промежуточный стержень I.
 *  2. Переместить оставшийся самый большой диск с S на D.
 *  3. Переместить поддерево с промежуточного I на D по такому же алгоритму.
 * Базовое ограничение - поддерево из одного диска.
 *
 * */

package ch_6;

public class Hanoi {

    static int nDisks = 3;

    public static void main(String[] args) {
        doTowers(3, 'a', 'b', 'c');
    }

    public static void doTowers(int topN, char from, char inter, char to) {
        // Входим, если базовое ограничение не встретилось, идем ниже
        if (topN == 1) {
            System.out.println("Disk 1 from " + from + " to " + to);
        } else {
            // рекурсивно вызываем себя же, пока не дойдем до базового ограничения
            doTowers(topN-1, from, to, inter);
            //только дойдя до базового ограничения, зайдя в блок if (topN == 1) и вернув управление попадаем сюда
            System.out.println("Disk " + topN + " from " + from + " to " + to);
            // снова рекурсивно вызываем себя же
            doTowers(topN-1, inter, from, to);
        }
    }

}
