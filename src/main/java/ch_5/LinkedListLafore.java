/**
 *
 *                                              Связные списки.
 * Рассмотрев массивы мы выяснили, что хранение данных в массивах имеет ряд недостатков. Например, в неупорядоченном
 * массиве поиск выполнятеся медленно, тогда как в упорядоченном массиве медленно выполняется вставка. Удаление
 * выполняется медленно в обоих случаях(упорядоченный массив или нет). Кроме того, размер массива невозможно изменить.
 * Сейчас мы рассмотрим связные списки - струдктуру данных, которая решает некоторые из этих проблем. Связный список
 * вообще очень часто используется. Им можно заменить массив в качестве базы для других структур (стеки, очереди и т д).
 *                                          Строение связного списка.
 * В связном списке каждый элемент данных встраивается в специальный объект, называемый элементом списка(классу, на основе
 * которого создаются такие объекты, часто присваивается имя Link). Так как список содержит много однотипных элементов,
 * для них удобно создать отдельный класс, отличный от класса самого связного списка. Каждый элемент(то есть объект Link)
 * содержит ссылку на следующий элемент списка, а поле, в котором хранится эта ссылка, обычно, называется next. Объект
 * же самого связного списка содержит ссылку на самый первый элемент, обычно называется first. Ниже пример класса Link.
 *                                            Ссылки и базовые типы.
 * Включение поля типа Link в определения самого класса Link выглядит немного странным лишь на первый взгляд. Как мы
 * помним, в Java запись public Link next; записывает в переменную next лишь ссылку на объект а не сам объект. Ссылка
 * представляет собой число, ассоциированное с объектом. Это число соотвествует адресу объекта в памяти компьютера.
 * Напомним также, что в Java примитивные типы(int, double etc) хранятся не так, как ссылочные. В полях примитивных
 * типов хранятся не ссылки, а конкретные числовые значения. То есть double salary = 100000.00; резервирует область
 * памяти и размещает в ней число 100000.00. С другой стороны, ссылка на объект типа Link link = someLink; помещает
 * в переменную link ссылку на объект someLink типа Link. Сам же обхект хранится где-то в другом месте. Объекты же
 * всегда создаются ключевым словом new; Link link = new Link(); и даже в этом случае поле link содержит не объект, а
 * лишь ссылку на него.
 * Фундаментальным отличием связного списка от массива является то, что в массиве каждый элемент всегда занимает конкретную
 * позицию и к нему можно обратиться напрямую по индексу. В связном списке же, конкретный элемент можно найти только одним
 * способом: отследив его по цепочке элеметов от начала списка. То есть, обратиться к элементу данных напрямую невозможно,
 * для поиска приходится использовать отношения между элементами. Мы начинаем с первого, переходим ко второму, затем к
 * третьему и так до тех пор, пока не найдем нужный. 183
 *
 * */



package ch_5;

public class LinkedListLafore {
}


class Link {

  public int iData;
  public double dData;
  public Link next;

}