/**
 *
 *                                          Пузырьковая сортировка.
 * Известна своей низкой скоростью работы. Работает следующим образом. У нас есть массив из N элементов. Сначала мы берем
 * 0 и 1 элемент. Если 0 элмент больше первого - то меняем их местами, если нет - оставляем как есть. Перемещаемся на
 * одну позицию вправо и сравниваем уже 1 и 2 элемент. Тоже самое, если 1 элемент больше 2 - меняем местами, иначе оставляем
 * как есть. И так до конца (n-1 элемента). После полной проходки сортировка не закончена, зато теперь мы имеем справа
 * самый большой элемент. Он как пузырек - всплыл. Это справедливо, потому что встретив самый большой элемент мы всегда
 * будем его переставлять все ближе и ближе к концу, так что в итоге, он окажется в конце массива - справа. При первой
 * проходке выполняется n-1 сравнений и от 0 до n-1 перестановок, в зависимости от начального расположения элементов.
 * Теперь алгоритм возвращается к началу и проходит по массиву точно таким же образом по новой. На этот раз максимум
 * перестановок будет n-2, так как в конце уже гарантированно будет самый большой элемент, который мы не тронем. И так
 * до конца, пока не убдет отсортированно все.
 * Реализация представлена ниже.
 *
 * Инварианты - вообще, инварианты - это условия, которые остаются неизменными на протяжении времени работы всего алгоритма.
 * Например, в пузырьковой сортировке инвариантом будет определение, что элементы справа от out уже отсортированы.
 * Сложность выполнения. Количество сравнений и максимально количество перестановок(если массив отсортирован в обратном
 * порядке) - n^2/2. Таким образом, отбросив лишнее, в О-нотации получаем время работы O(n^2). Вообще, каждый раз, когда
 * мы видим вложенные циклы - можно предполагать, что сортировка выполняется за время O(n^2).
 *
 * */



package ch_3.sorting.bubbles;

public class Main {

  private long[] array;
  private int nElems;

  public Main(int max) {
    array = new long[max];
    this.nElems = 0;
  }

  public void insert(long value) {
    array[nElems] = value;
    nElems++;
  }

  public  void display() {
    for (int i = 0; i < nElems; i++) {
      System.out.print(array[i] + " ");
    }
    System.out.println();
  }

  public void bubbleSort() {
    int out, in;
    for (out = nElems - 1; out > 0; out--) { // тут у лафоре ошибка, у него написано out > 1
      for (in = 0; in < out; in++) {
        if (array[in] > array[in+1]) {
          swap(in, in+1);
        }
      }
      display();
    }
  }

  private void swap(int one, int two) {
    long temp = array[one];
    array[one] = array[two];
    array[two] = temp;
  }

  public static void main(String[] args) {
    int maxSize = 100;
    Main main = new Main(maxSize);
    main.insert(9);
    main.insert(8);
    main.insert(7);
    main.insert(6);
    main.insert(5);
    main.insert(4);
    main.insert(3);
    main.insert(2);
    main.insert(1);
    main.insert(0);

    main.display();
    main.bubbleSort();
    System.out.println();
    main.display();
  }

}
