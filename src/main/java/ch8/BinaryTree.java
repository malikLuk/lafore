/**
 *
 *                                                  Двоичные деревья.
 * Двоичное дерево сочетает в себе преимущества двух других структур данных: упорядоченного массива и связного списка.
 * Поиск выполняется также быстро как в упорядоченном массиве, а операции вставки и удаления - как в связном списке.
 * Дерево состоит из узлов, соединенных ребрами (рис tree_1). На самом деле, дерево является частным случаем более общей
 * структуры, называемой графом. Впрограммах узлы часто представляют сущности: людей, детали машин, билеты и т д. Ребра,
 * или соединительные линии между узлами, представляют отношения между этими самыми узлами. Упрощенно говоря, программа
 * может легко и быстро перейти от узла к узлу, если между ними имеется соединительная линия. В общем случае - перемещение
 * происходит только в одном направлении: от корневого узла вниз. В Java-программах ребра - это ссылки. В C или C++ - это
 * указатели.
 * В Двоичном Дереве каждый узел имеет не более двух потомков. Формально, они называются Деревьями Двоичными Поиска(рис tree_4).
 * Ниже представлена терминология (рис tree_2).
 * Путь - это последовательность узлов, по которым надо пройти, чтобы соединить два нужных узла.
 * Корень - узел на самом верху дерева, он же - корневой узел. Дерево имеет только один корень. Чтобы совокупность узлов
 *  и ребер могла называться деревом, от корня к любому другому узлу должен вести один (и тольк один!) путь. Структура на
 *  рисунке tree_3 не является деревом, поскольку нарушает это правило.
 * Родитель - любой узел, кроме корневого имеет ровно одно ребро, уходящее вверх к другому узлу. Узле, расположенный выше
 *  него называется родительским узлом(родителем) по отношению к данному узлу.
 * Потомок - любой узел может иметь одно или несколько ребер, соединяющих его с узлами более низкого уровня. Узлы,
 *  находящиесяниже заданного называются его потомками.
 * Лист - узел, не имеющий потомков.
 * Поддерево - любой узел может рассматриваться как корень поддерева, состоящего из его потомком, потомком его потомков
 *  и т д.
 * Посещение - переход программы к узлу (обычно, с целью выполнения некоторой операции). Простое прохождение мимо посещением
 *  не считается.
 * Обход дерева - посещение всех его узлов в некотором заданном порядке.
 * Уровень узла - количество поколений, отделяющих его от корня, если считать, что корень находится на нулевом уровне.
 * Ключи - одно из полей объекта называется ключевым. Ключ используется при поиске элемента или выполнении с ним других
 *  операций. В данном случае - это нужное нам значение узла-объекта.
 * Грубый пример дерева (правда, не двочиного) - иерархическая файловая структура.
 *
 * */

package ch8;

public class BinaryTree {
}
