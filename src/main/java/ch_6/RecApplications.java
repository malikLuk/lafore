/**
 * Интересные применения рекурсии.
 * Возведение числа в степень.
 * Нам надо возвести X в степень Y. Одно из возможных решений основано на группировке множителей. Рассмотрим 2^8. В
 * конечно итоге, 2 необходимо умножить на себя 8 раз. Начнем с 2 * 2 = 4. Две двойки перемножены и остается еще шесть.
 * Однако теперь у нас появилось число для новой работы - 4. Умножаем 4 * 4 = 16. Четыре вдойки перемножены, осталось
 * еще 4. 16 * 16 = 256 - как раз перемножены все восемь двоек. Итак, мы вычислили 2^8 за три операции, а не за семь -
 * 2*2*2*2*2*2*2*2. Сложность с O(N) сократилась на O(logN). Такая схема основана на математической формуле:
 * x^y = (x^2)^(y/2) - икс в квадрате в степени игрик-пополам. Напистаь это самому. Данный алгоритм подходит только для
 * четных степеней. Допилить для нечетных. Допилил, заодно посмотреть стр 290.
 * <p>
 * Задача о рюкзаке.
 * Классическая задача программирования. В простейшей форме звучит так: нужно заполнить рюкзак предметами различного веса
 * из доступных, для достижения заданного веса. Укладывать все предметы не обязательно. Допустим, собранный рюкзак должен
 * весить 20кг, а у нас есть предметы весом 11, 8, 7, 6 и 5 кг. Получается, для достижения веса в 20 кг, нам нужны предметы
 * весом 8, 7 и 5 кг. Алгоритм будет выглядеть так:
 * 1. если в какой-то момент суммарный вес всех выбранных предметов достигнет нужного - задача выполнена.
 * 2. Выбрать первый предмет. Общий вес остальных предметов должен быть равен разности между целевым весом рюкзака и весом
 * первого предмета.
 * 3. Последовательно перебрать комбинации остальных предметов. Впрочем, перебирать все необязательно, если вес набранных
 * предметов превышает заданный - можно остановить перебор.
 * 4. Если ни одна из комбинаций не сработала - отложить первый предмет и повторить весь процесс для второго.
 * 5.Проверить таким образом и для остальных. Если ничего не подходит - задача решения не имеет.
 * Написать рекурсивный метод.
 */

package ch_6;

/**
 * Created by Lukmanov.MN on 07.09.2018.
 */
public class RecApplications {

    public static void main(String[] args) {
        System.out.println(power(2, 11));
    }

    /**
     * При слишком глубоком рекурсивном вызове появляется StackOverflowError
     * */
    static int power(int digit, int pow) {
        if (pow == 1) {
            return digit;
        } else {
            if (pow % 2 != 0) {
                return digit * power(digit * digit, pow / 2);
            }
            return power(digit * digit, pow / 2);
        }
    }

    /*static Object bagPackaging(int[] arr, int index, int targetWeight) {
        if (arr[index] < targetWeight) {
            int newTargetWeight = targetWeight - arr[index];
            int newIndex = index + 1;
            return bagPackaging(arr, newIndex, newTargetWeight);
        }
    }*/

}
