/**
 *
 *                                                      Немного истории и практики.
 * Одним из первых математиков, занимавшихся теорией графов, был Леонард Эйлер. Он решил т.н. задачу с "кенигсбергскими
 * мостами" - в городе Кенигсберг был остров с семью мостами(gr_4.png), требуется найти способ пересечь все семь мостов
 * таким образом, чтобы по каждому мосту пройти только один раз. Эйлер доказал, что это невозможно, представив задачу в
 * виде графа. Вершины - участки земли, а ребра - мосты.
 * Но это все теория, и математики долгое время работали с графом как с абстракцией. Но какая структура данных лучше
 * подойдет для описания графа на практике? Начнем с вершин, затем перейдем к ребрам.
 * В очень абстрактной программе для работы с графом можно пронумеровать вершины от 0 до N-1, где N - количество вершин.
 * Для хранения вершин переменные вообще не нужны, потому что их полезность зависит от связей с другими вершинами.
 * Однако, на практике вершины обычно представляют реально существующие объекты. А объекты, в свою очередь, описываются
 * полями данных. Скажем, если вершина представляет город в модели сети воздушного сообщения, в ней может храниться
 * название города, высота над уровнем моря, координаты и т.д. Таким образом, для представления вершин обычно удобно
 * использовать объекты соответствующего класса. В наших примерах программ для каждой вершины будет храниться только
 * буквенная метка(A, B, C etc) и флаг, используемый поисковыми алгоритмами(об этом ниже). Класс вершины Vertex описан
 * ниже. Объекты вершин можно хранить в массиве и обращаться к ним по индексу. В наших примерах они будут храниться в
 * массиве vertexList. Для хранения, конечно, можно использовать и список или другую структуру данных. Впрочем, структура
 * для хранения вершин выбирается только для удобства. Она никак не связана со способом соединения вершин ребрами.
 * В прошлых главах мы уже видели, что даже дерево можно представить не только списком объектов со ссылками, но и массивом.
 * Тем не менее, для представления графа такой подход неверен. У узла двоичного дерева может быть максимум два потомка,
 * а вот с вершиной графа могут быть связано произвольное количество других вершин. Для моделирования подобной нежесткой
 * структуры нужен другой способ представления ребер. При работе с графами обычно применяются две структуры: матрица
 * смежноти и список смежности(напомним, что вершины называются смежными, если они соединены одним ребром).
 * Матрица смежности представляет собой двумерный массив, элементы которого обозначают наличие связей между двумя вершинами.
 * Если граф содержит N вершин, то матрица смежности представляет собой массим N x N (на рисунке gr_5.png представлена
 * матрица смежности для графа(a) с рисунка gr_3.png). Наличие ребра между вершинами - 1, отсуствие - 0(ну или true/false).
 * Как видно, вершина не может быть смежна сама себе.
 * Другой способ - список смежности. Вообще говоря, каждый список смежности является массивом списков(а иногда и списком
 * списков). Каждый отдельный список содержит информацию о том, какие вершины являются смежными по отношению к заданной.
 * В таблице gr_6.png приведены списки смежности для gr_3.png
 * Чтобы включить в граф новую вершину, нужно создать ее и добавить в массив vertexList. В переменной nVerts хранится
 * текущее количество вершин в графе. Чтобы добавить ребро, нужно изменить таблицу смежности. Допустим, мы вставляем
 * ребро между вершинами 1 и 3 (эти числа соотвествуют индексам массива vertexList, в котором хранятся вершины). Для
 * этого у нас есть матрица adjMat, которая заполняется нулями при создании. Добавляя ребро между 1 и 3 мы должны
 * выполнить следующие команды:
 *  adjMat[1][3] = 1;
 *  adjMat[3][1] = 1;
 * Подробнее в классе GraphExample
 * */

package ch13;

public class HistoryAndPractice {
}

/**
 * Класс вершины
 * */
class Vertex {

    public char label;
    public boolean wasVisited;

    public Vertex(char label) {
        this.label = label;
        this.wasVisited = false;
    }

}

/**
 * Граф
 * */
class GraphExample {

    private final int MAX_VERTS = 20;
    private Vertex[] vertexList;
    private int[][] adjMat;
    private int nVerts;

    public GraphExample() {
        vertexList = new Vertex[MAX_VERTS];
        adjMat = new int[MAX_VERTS][MAX_VERTS];
        nVerts = 0;
        for (int i = 0; i < MAX_VERTS; i++) {
            for (int j = 0; j < MAX_VERTS; j++) {
                adjMat[i][j] = 0;
            }
        }
    }

    public void addVertex(char label) {
        vertexList[nVerts++] = new Vertex(label);
    }

    public void addEdge(int start, int end) {
        adjMat[start][end] = 1;
        adjMat[end][start] = 1;
    }

    public void displayVertex(int vertex) {
        System.out.println(vertexList[vertex].label);
    }

}
