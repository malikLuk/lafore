/**
 *
 *                                                          Двусвязные списки.
 * Не путать с двусторонним списком. Потенциальным недостатком обычных связных списков является сложность перемещения в
 * обратном направлении. Команда вида current = current.next позволяется передвигаться по списку вперед, но соотвествующего
 * способа перехода к предыдущему элементу не существует. Иногда это крайне неэффективно. Поэтому должен быть способ
 * двигаться по списку в обратном направлении. Двусвязный список предоставляет такую возможность, то есть позволяет
 * перемещаться по списку как в прямом, так и в обратном направлении. Суть в том, что каждый элемент списка хранит две
 * ссылки, вместо одной - на следующий и предыдущий элементы. Недостаток такого подхода в том, что при каждой вставке и
 * удалении нам придется менять четыре ссылки, вместо двух. И, конечно, каждый элемент занимает занимает больше места в
 * памяти из-за дополнительной ссылки.
 * Двусвязный список не обязан быть двусторонним(то есть ссылка на последний элемент не обязана храниться в объекте
 * списка), но это удобно. Стр 222.
 *
 * */

package ch_5;

public class TwinLinkList {
}

class LinkTwin {

    public long dData;
    public LinkTwin next;
    public LinkTwin previous;

}
