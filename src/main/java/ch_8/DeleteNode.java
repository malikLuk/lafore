/**
 *
 *                                                  Удаление узла.
 * Удаление узлов является самой сложной из стандартных операций с деревьями двоичного поиска. Удаление начинается с поиска
 * удаляемого узла - это уже было продемонстрировано в методах find() и insert(). Когда узел найден - необходимо рассмотреть
 * три возможных случая:
 *   1. Удаляемый узел является листом(не имеет потомков)
 *   2. Удаляемый узел имеет одного потомка.
 *   3. Удаляемый узел имеет двух потомков.
 * Первый случай совсем просто, второй - чуть сложнее, третий - сложный.
 * Чтобы удалить листовой узел, достаточно изменить его поле в родительском узле, записав туда null вместо ссылки на узел.
 * Рисунок tree_12. Благодаря сборщику мусора - нам не надо беспокоиться об уничтожении самого узла. Метод delete()
 * в классе Tree реализовывает удаление во всех трех случаях.
 * Второй случай тоже не имеет особых сложностей. Узел имеет только две связи: с родитем и со своим единственным потомком.
 * Требуеся вырезать сам узел из этой цепочки и соединить родителя узла с потомком этого узла напрямую. То есть изменить
 * соответсвующую ссылку (leftChild или rightChild) родителя так, чтобы она указывала потомка удаляемого узла. Смотреть
 * рисунок tree_13. Стоит обратить внимание на то, как ссылки упрощают удаление целых поддеревьев. Для этого достаточно
 * отсоединить старую ссылку от поддерева и создать новую ссылку на него в другом месте. Нет необходимости удалять узлы
 * по отдельности.
 *
 * */

package ch_8;

public class DeleteNode {
}
