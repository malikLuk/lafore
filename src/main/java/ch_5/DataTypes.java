/**
 *
 *                                                  Типы данных.
 * Выражение "тип данных" имеет достаточно широкий смысл. Термином "примитивный тип" в действительности обозначаются
 * сразу два понятия: элемент данных, обладающий определенными характеристиками, и набор операций, разрешенный для этих
 * данных. Например, переменные типа int в Java могут принимать целочисленные значения в диапазоне от 2^-31 до 2^31-1,
 * к которым могут применяться операции +,-,/,* и т д. Допустимые операции типа данных являются неотделимой частью его
 * смыслового содержания.
 *
 * ООП позволяет программисту определять свои типы данных в форме классов. Таким образом, любая структура данных,
 * представленная классом, тоже может называться типом данных. Стек отличается от int, но оба типа определяются как
 * совокупность схемы данных и набора операций с этими данными.
 *
 *                                                  Абстракция.
 * Слово "абстрактный" означает "логически отделенный от подробного описания или реализации". Абстракция представляет
 * сущность или важнейшие характеристики чего-либо. Например "пост президента" - это абстракция, не зависящая от личности
 * человека, занимающего этот пост. Конкретные личности, занимающие этот пост, приходят и уходят, но полномочия и обязанности
 * поста президента остаются неизменными. Таким образом, в ООП, абстрактным типом данных называется класс, рассматриваемый
 * независимо от его реализации. Абстрактный тип складывается из описания данных класса(поля), списка выполняемых с этими
 * данными операций(методы) и инструкций по выполнению этих операций. Из описания исключаются любые подробности того, как
 * методы выполняют свои задачи. Пользователь класса знает, какие методы и как он должен вызывать, какие результаты он при
 * этом может получить, но только не то, как методы выполняют свою работу.
 * Смысл абстрактного типа данных дополнительно расширяется для структур данных - таких как стеки и очереди. Как и для
 * любого другого класса, этим термином обозначаются данные и выолняемые с ними операции, но в этом контексте, даже сам
 * способ хранения данных скрывается от пользователя. Пользователю неизвестно ни то, как методы выполняют свою работу, ни
 * то, какая структура используется для хранения данных. Приминительно к стеку, пользователь знает о существовании методов
 * push() и pop() и ряда других и о том, чего ждать в результате их выполнения. Но пользователю не нужно знать, откуда и
 * как эти методы берут данные.
 *
 *                                                  Интерфейс.
 * Спецификация абстрактного типа данных часто называется интерфейсом. В интерфейсе объединяется все, что видит пользователь
 * класса - обычно, это открытые методы.
 *
 * */


package ch_5;

public class DataTypes {
}
